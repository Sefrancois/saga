"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
/**
 * Class implementing the operation result pattern.
 */
class Result {
    constructor(value) {
        this.isAFail = value instanceof Error;
        this.value = value;
    }
    /**
     * Create a new instance of successful `Result` with the provided content as `value`. You cannot give an instance
     * of `Error` as you are creating a successful `Result`.
     * @static
     * @template T
     * @param {Exclude<T, Error>} content - Value of the successful `Result` you can use for your further instructions.
     * @return {Result}
     */
    static ok(content = null) {
        return new Result(content);
    }
    /**
     * Create a new instance of failed `Result` with the provided reason as `value`. You cannot give an instance other
     * than on extending Error as you are creating a failed `Result`.
     * @static
     * @template E
     * @param {E} reason - The reason why your code is failing. It must extend `Error` class.
     * @returns {`Result<E>`} - An instance of `Result` containing the error you provided.
     */
    static failure(reason) {
        return new Result(reason);
    }
    /**
     * Indicates whether operation succeeded or failed.
     * @returns {boolean} - Indicates whether a result is failed or not.
     */
    get isFailure() {
        return this.isAFail;
    }
}
exports.Result = Result;
//# sourceMappingURL=index.js.map